/*******************************************************************************
*  Copyright 2016 Ilan Lachish                                                 *
*  This program is free software: you can redistribute it and/or modify        *
*  it under the terms of the GNU General Public License as published by        *
*  the Free Software Foundation, either version 3 of the License, or           *
*  (at your option) any later version.                                         *
*                                                                              *
*  This program is distributed in the hope that it will be useful,             *
*  but WITHOUT ANY WARRANTY; without even the implied warranty of              *
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                *
*  GNU General Public License (http://www.gnu.org/licenses/)for more details.  *
*                                                                              *
*  This program is will convert the 0-127 midi values from a VOX VFS5 foot     *
*    controller plugged into a Yamaha S90-ES (or similar) into separate midi   *
*    notes.  Intended for use with a sooperlooper.                             *
*                                                                              *
*******************************************************************************/
/*
The following midi values are read from the foot controller
Low  Hi    Action
11  11    all
13  14    3&4
16  16    2&4
18  20    4
25  27    2&3
29  32    1&3
33  36    3
42  44    Gr1&2
46  47    Rd1&2
50  51    Gr2
55  57    Rd2
61  62    Gr1
69  71    Rd1
75  78    GrNone
88  90    RdNone
127  127    Unplug
*/



desc: MIDI Vox VSF5 Converter
//tags: MIDI processing
//author: Ilan Lachish

slider1:1<0,127,1>Green Ch1 pressed note
slider2:2<0,127,1>Green Ch2 pressed note
slider3:4<0,127,1>Green Ch3 pressed note
slider4:8<0,127,1>Green Ch4 pressed note
slider5:17<0,127,1>Red Ch1 pressed note
slider6:18<0,127,1>Red Ch2 pressed note
slider7:4<0,127,1>Red Ch3 pressed note (tied to Gr)
slider8:8<0,127,1>Red Ch4 pressed note (tied to Gr)

slider9:1<0,1,1{No, Yes} >Send NOTE OFF when released
slider10:0<0,16,1>Output channel (0 passthrough)

slider11:4<0,127,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>Controller Source

//slider1:127<0,127,1>Green nothing pressed note
//slider1:127<0,127,1>Red nothing pressed note


@init
ext_noinit = 1;
// lastaction: 0 nothing pressed; 1 .. 4 Green Ch1..2 or GrRd Ch3..4 pressed; 5 ...6 Red Ch 1..2 pressed  
lastNote = -1;

// constants
MidiNoteOff = $x80;
MidiNoteOn = $x90;

@slider

// Set variables
slider7 = slider3;
slider8 = slider4;
outnoteG1 = slider1;
outnoteG2 = slider2;
outnoteG3 = slider3;
outnoteG4 = slider4;
outnoteR1 = slider5;
outnoteR2 = slider6;
outnoteR3 = slider7;
outnoteR4 = slider8;
sendNoteOff = slider9;
outChannel = slider10;
inCont = slider11;
////////////////////////////////////////////////////////////////////////////////////////////
@block
while
(
  midirecv(offset, msg1, msg2, msg3) ? (
    setNote = 0; // Reset note to send
    passthrough = 0; // Reset passthrough bit
    channel = msg1 & $x0F ; // Set the passthrough output channel

    // Check if midi is a control message on desired controller
    msg1 & $xF0 == $xB0 && msg2 == inCont ? (
      // valid control change
      // change the channel as per setting
      outChannel != 0 ? channel = outChannel - 1; 

      // Test controller value
    
      // if unpressed (Gr or Rd) send note OFF for last note
      (msg3 >= 75 && msg3 <= 78) || ( msg3 >= 88 && msg3 <= 90) ? (
        // test to see if last was a note and send note off
        lastNote != -1 ? (
          sendNoteOff == 1 ? midisend(offset, MidiNoteOff + channel, lastNote, 0);
          lastNote = -1;
        );
      ) : lastNote == -1 ? ( // only proceed to check for press if last detected was unpressed
        msg3 == 61 || msg3 == 62 ? ( // else if Gr1
          setNote = outnoteG1; 
          lastNote = outnoteG1;
        ) : msg3 == 50 || msg3 == 51 ? ( // else if Gr2
          setNote = outnoteG2; 
          lastNote = outnoteG2;
        ) : msg3 >= 33 && msg3 <= 36 ? ( // else if GrRd3
          setNote = outnoteG3; 
          lastNote = outnoteG3;
        ) : msg3 >= 18 && msg3 <= 20 ? ( // else if GrRd4
          setNote = outnoteG4; 
          lastNote = outnoteG4;
        ) : msg3 >= 69 && msg3 <= 71 ? ( // else if Rd1
          setNote = outnoteR1; 
          lastNote = outnoteR1;
        ) : msg3 >= 55 && msg3 <= 57 ? ( // else if Rd2
          setNote = outnoteR2; 
          lastNote = outnoteR2;
        ) : passthrough = 1; // else out of expected range (set passthrough bit for debugging)
      ) : passthrough = 1; // this captures double presses (modify later to use)

    ) : (
      // Not a desired control msg so passthrough as is
      midisend(offset, msg1, msg2, msg3);
    );
    
    // send passthrough or note msg
    passthrough == 1 ? (
      // send original midi
      midisend(offset,  (msg1 & $xF0) + channel , msg2, msg3);
    ) : (
      // send new note if required
      lastNote != -1 ? (
      midisend(offset, MidiNoteOn + channel, setNote, 127);
      ) 
      
    );
    
    1; // Force loop to continue until all messages have been processed
  );
);
